import { VideoTransformDevice } from 'amazon-chime-sdk-js';
import MediaStreamProvider from './MediaStreamProvider';
/**
 * [[AudioBufferMediaStreamProvider]] creates a `MediaStream` from a parsed
 * audio buffer file.
 */
export declare class AudioBufferMediaStreamProvider implements MediaStreamProvider {
    private audioPath;
    private shouldLoop;
    mediaElementSource: HTMLMediaElement | undefined;
    constructor(audioPath: string, shouldLoop?: boolean);
    getMediaStream(): Promise<MediaStream>;
    pause(): void;
    resume(): void;
}
/**
 * [[SynthesizedStereoMediaStreamProvider]] generates a stereo tone by using 2 `OsciallatorNode`s that
 * produce 2 different frequencies. The output of these 2  nodes is passed through a `ChannelMergerNode` to obtain
 * an audio stream with stereo channels where the left channel contains the samples genrated by one node and the
 * right channel contains samples generated by the other.
 */
export declare class SynthesizedStereoMediaStreamProvider implements MediaStreamProvider {
    private toneHzLeft;
    private toneHzRight;
    mediaElementSource: HTMLMediaElement | undefined;
    constructor(toneHzLeft: number, toneHzRight: number);
    getMediaStream(): Promise<MediaStream>;
    pause(): void;
    resume(): void;
}
/**
 * [[AudioGainMediaStreamProvider]] wraps another [[MediaStreamProvider]] and applies some amount of audio gain.
 * It will discard any video tracks in the process, use [[MergedMediaStreamProvider]] if needed to recombine.
 */
export declare class AudioGainMediaStreamProvider implements MediaStreamProvider {
    private streamProvider;
    private gain;
    private context;
    constructor(streamProvider: MediaStreamProvider, gain: number);
    getMediaStream(): Promise<MediaStream>;
    pause(): void;
    resume(): void;
}
/**
 * [[ScreenShareMediaStreamProvider]] wraps the `MediaStream` returned by a `getUserMediaCall`
 */
export declare class ScreenShareMediaStreamProvider implements MediaStreamProvider {
    private framerate;
    private mediaStream;
    constructor(framerate: number);
    getMediaStream(): Promise<MediaStream>;
    pause(): void;
    resume(): void;
}
/**
 * [[FileMediaStreamProvider]] emits a media stream corresponding to audio/video found at the
 * provided URI.
 */
export declare class FileMediaStreamProvider implements MediaStreamProvider {
    mediaElementSource: HTMLVideoElement | undefined;
    constructor(path: string);
    getMediaStream(): Promise<MediaStream>;
    private playToStream;
    pause(): void;
    resume(): void;
}
/**
 * [[VideoTransformDeviceMediaStreamProvider]] emits a media stream corresponding to a [[VideoTransformDevice]]
 */
export declare class VideoTransformDeviceMediaStreamProvider implements MediaStreamProvider {
    private streamProvider;
    private transformDevice;
    constructor(streamProvider: MediaStreamProvider, transformDevice: VideoTransformDevice);
    getMediaStream(): Promise<MediaStream>;
    pause(): void;
    resume(): void;
}
/**
 * [[MergedMediaStreamProvider]] combines the audio from one [[MediaStreamProvider]] with
 * video from another [[MediaStreamProvider]]
 */
export declare class MergedMediaStreamProvider implements MediaStreamProvider {
    private audioStream;
    private videoStream;
    private outputStream;
    constructor(audioStream: MediaStreamProvider, videoStream: MediaStreamProvider);
    getMediaStream(): Promise<MediaStream>;
    pause(): void;
    resume(): void;
}
